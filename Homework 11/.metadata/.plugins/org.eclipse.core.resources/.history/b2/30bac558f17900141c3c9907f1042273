
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.FileRequestEntity;
import org.apache.commons.httpclient.methods.PostMethod;
import org.openrdf.OpenRDFException;
import org.openrdf.model.Value;
import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryLanguage;
import org.openrdf.query.TupleQuery;
import org.openrdf.query.TupleQueryResult;
import org.openrdf.repository.Repository;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.manager.RemoteRepositoryManager;
import org.openrdf.rio.RDFFormat;

import java.io.*;
import java.net.URL;
import java.net.URLConnection;

/************************************************************
	- Simple Calais client to process file or files in a folder
	- Takes 2 arguments
		1. File or folder name to process
		2. Output folder name to store response from Calais
	- Please specify the correct web service location url for CALAIS_URL variable
	- Please adjust the values of different request parameters in the createPostMethod
	
**************************************************************/

public class Hw11 {

	private static final String CALAIS_URL = "http://api.opencalais.com/tag/rs/enrich";

    private File input,xmlOutput;
    private File output;
    private HttpClient client;

    private PostMethod createPostMethod() {

        PostMethod method = new PostMethod(CALAIS_URL);

        // Set mandatory parameters
        method.setRequestHeader("x-calais-licenseID", "xejg3c8j4awnng6chqk3r86r");

        // Set input content type
        /* method.setRequestHeader("Content-Type", "text/xml; charset=UTF-8");*/
        method.setRequestHeader("Content-Type", "text/html; charset=UTF-8");
        //method.setRequestHeader("Content-Type", "text/raw; charset=UTF-8");

		// Set response/output format
        method.setRequestHeader("Accept", "xml/rdf");
        //method.setRequestHeader("Accept", "application/json");

        // Enable Social Tags processing
        /*method.setRequestHeader("enableMetadataType", "GenericRelations,SocialTags");
		*/
        return method;
    }

	private void run() {
		try {
            if (input.isFile()) {
                postFile(input, createPostMethod());
            } else if (input.isDirectory()) {
                System.out.println("working on all files in " + input.getAbsolutePath());
                for (File file : input.listFiles()) {
                    if (file.isFile())
                        postFile(file, createPostMethod());
                    else
                        System.out.println("skipping "+file.getAbsolutePath());
                }
            }
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

    private void doRequest(File file, PostMethod method) {
        try {
            int returnCode = client.executeMethod(method);
            if (returnCode == HttpStatus.SC_NOT_IMPLEMENTED) {
                System.err.println("The Post method is not implemented by this URI");
                // still consume the response body
                method.getResponseBodyAsString();
            } else if (returnCode == HttpStatus.SC_OK) {
                System.out.println("File post succeeded: " + file);
                saveResponse(file, method);
            } else {
                System.err.println("File post failed: " + file);
                System.err.println("Got code: " + returnCode);
                System.err.println("response: "+method.getResponseBodyAsString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            method.releaseConnection();
        }
    }

    private void saveResponse(File file, PostMethod method) throws IOException {
        PrintWriter writer = null;
        File out= null;
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(
                    method.getResponseBodyAsStream(), "UTF-8"));
            out = new File(output, file.getName() + ".rdf");
            //writer = new PrintWriter(new BufferedWriter(new FileWriter(out)));
            writer = new PrintWriter(out,"UTF-8");
            writer.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            String line;
            while ((line = reader.readLine()) != null) {
                writer.println(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (writer != null) try {
            writer.close();
            xmlOutput = out;
            } catch (Exception ignored) {}
        }
    }

    private void postFile(File file, PostMethod method) throws IOException {
        method.setRequestEntity(new FileRequestEntity(file, null));
        doRequest(file, method);
    }

    private static File readArticle(String url, String fileURL) throws Exception
    {
    		File file = new File(fileURL);
            URL objURL = new URL(url);
            URLConnection conn = objURL.openConnection();
            FileWriter fw = new FileWriter(file);
            
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            
            String inputLine;
            while ((inputLine = in.readLine()) != null) 
                fw.write(inputLine);
            
            in.close();
            fw.close();
       
    	return file;
    }
    
    
    private void populateLocalRepository(File file) throws Exception
    {
    	String baseURI = "";
    	String serverUrl = "http://localhost:6655/openrdf-sesame";
		RemoteRepositoryManager manager = new RemoteRepositoryManager(serverUrl);
		manager.initialize();
    	Repository myRepository = manager.getRepository("Homework11");
    	try {
    	   RepositoryConnection con = myRepository.getConnection();
    	   try { 
    		  System.out.println(file.getAbsolutePath()); 
    	      con.add(file, baseURI, RDFFormat.RDFXML);
    	   }
    	   catch(Exception e)
    	   {
    		   e.printStackTrace();
    	   }
    	   finally {
    	      con.close();
    	      
    	   }
    	}
    	catch (Throwable e)
    	{
    		e.printStackTrace();
    	}
    }
    //End of method
    
    private static String getValue(Value val)
	{
		if(val ==null)
			return "";
		else 
			return val.toString();
	}
    
    private void fetchAndPrintTripleDetails() throws Exception
    {
    	String baseURI = "";
    	String serverUrl = "http://localhost:6655/openrdf-sesame";
		RemoteRepositoryManager manager = new RemoteRepositoryManager(serverUrl);
		manager.initialize();
    	Repository myRepository = manager.getRepository("Homework11");
    	RepositoryConnection con  = myRepository.getConnection();
    	
    	StringBuffer sb = new StringBuffer();
    	
    	sb.append("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>");
    	sb.append("PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>");
    	sb.append("PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>");
    	sb.append("select ?p,?q {");
    	sb.append("?p  <http://s.opencalais.com/1/pred/name> ?q .");
        sb.append("?p rdf:type <http://s.opencalais.com/1/type/em/e/XXXXXXXXX> . }");
        String query = sb.toString();
        
        String []arrEntities = new String[]{"Person","City","Organization"};
        
        for(String entity:arrEntities)
        {
        	String queryTemp = query.replaceAll("XXXXXXXXX", entity);
        	TupleQuery tupleQuery = con.prepareTupleQuery(QueryLanguage.SPARQL, queryTemp);
        	TupleQueryResult result = tupleQuery.evaluate();
        	
        	  while (result.hasNext())
        	  {
        		  BindingSet bindingSet = (BindingSet) result.next();
        		  System.out.println(entity+ " | " + getValue(bindingSet.getValue("p"))+" | "+ getValue(bindingSet.getValue("q")));
        		  
        	  }
        	
        }
    	
    }
    
    /** This is a main method which is used to invoke the page and store the queries in triple store
     *  This program stores the results in triple store and queries it appropriately to display the results in 
     *  tabular format. It takes one argument - The HTML path corresponding to the page to be cached and 
     *  searched
     * 
     * @param args
     */
    public static void main(String[] args) {
        
    	Hw11 httpClientPost = new Hw11();
        File input = null;
        
       try
       {
    	//Fetch html from url and copy to a local file
    	input = readArticle(args[0],"Input.txt");    
    	httpClientPost.input = input;
    	//Set the output local directory
        httpClientPost.output = new File(".");
        httpClientPost.client = new HttpClient();
        httpClientPost.client.getParams().setParameter("http.useragent", "Calais Rest Client");
        httpClientPost.run();

        //Read the output xml and load the stuff into the repository
        httpClientPost.populateLocalRepository(httpClientPost.xmlOutput);
        
       
       
       }
       catch(Throwable e)
       {
    	   e.printStackTrace();
       }
       finally
       {
    	   
       }
    }
    //End of method


}
