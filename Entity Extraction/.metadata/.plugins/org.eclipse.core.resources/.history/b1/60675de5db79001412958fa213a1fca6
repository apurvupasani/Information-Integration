
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.FileRequestEntity;
import org.apache.commons.httpclient.methods.PostMethod;
import org.openrdf.OpenRDFException;
import org.openrdf.repository.Repository;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.manager.RemoteRepositoryManager;
import org.openrdf.rio.RDFFormat;

import java.io.*;
import java.net.URL;
import java.net.URLConnection;

/************************************************************
	- Simple Calais client to process file or files in a folder
	- Takes 2 arguments
		1. File or folder name to process
		2. Output folder name to store response from Calais
	- Please specify the correct web service location url for CALAIS_URL variable
	- Please adjust the values of different request parameters in the createPostMethod
	
**************************************************************/

public class Hw11 {

	private static final String CALAIS_URL = "http://api.opencalais.com/tag/rs/enrich";

    private File input,xmlOutput;
    private File output;
    private HttpClient client;

    private PostMethod createPostMethod() {

        PostMethod method = new PostMethod(CALAIS_URL);

        // Set mandatory parameters
        method.setRequestHeader("x-calais-licenseID", "xejg3c8j4awnng6chqk3r86r");

        // Set input content type
        /* method.setRequestHeader("Content-Type", "text/xml; charset=UTF-8");*/
        method.setRequestHeader("Content-Type", "text/html; charset=UTF-8");
        //method.setRequestHeader("Content-Type", "text/raw; charset=UTF-8");

		// Set response/output format
        method.setRequestHeader("Accept", "xml/rdf");
        //method.setRequestHeader("Accept", "application/json");

        // Enable Social Tags processing
        /*method.setRequestHeader("enableMetadataType", "GenericRelations,SocialTags");
		*/
        return method;
    }

	private void run() {
		try {
            if (input.isFile()) {
                postFile(input, createPostMethod());
            } else if (input.isDirectory()) {
                System.out.println("working on all files in " + input.getAbsolutePath());
                for (File file : input.listFiles()) {
                    if (file.isFile())
                        postFile(file, createPostMethod());
                    else
                        System.out.println("skipping "+file.getAbsolutePath());
                }
            }
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

    private void doRequest(File file, PostMethod method) {
        try {
            int returnCode = client.executeMethod(method);
            if (returnCode == HttpStatus.SC_NOT_IMPLEMENTED) {
                System.err.println("The Post method is not implemented by this URI");
                // still consume the response body
                method.getResponseBodyAsString();
            } else if (returnCode == HttpStatus.SC_OK) {
                System.out.println("File post succeeded: " + file);
                saveResponse(file, method);
            } else {
                System.err.println("File post failed: " + file);
                System.err.println("Got code: " + returnCode);
                System.err.println("response: "+method.getResponseBodyAsString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            method.releaseConnection();
        }
    }

    private void saveResponse(File file, PostMethod method) throws IOException {
        PrintWriter writer = null;
        File out= null;
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(
                    method.getResponseBodyAsStream(), "UTF-8"));
            out = new File(output, file.getName() + ".xml");
            writer = new PrintWriter(new BufferedWriter(new FileWriter(out)));
            String line;
            while ((line = reader.readLine()) != null) {
                writer.println(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (writer != null) try {
            writer.close();
            xmlOutput = out;
            } catch (Exception ignored) {}
        }
    }

    private void postFile(File file, PostMethod method) throws IOException {
        method.setRequestEntity(new FileRequestEntity(file, null));
        doRequest(file, method);
    }

    private static File readArticle(String url, String fileURL) throws Exception
    {
    		File file = new File(fileURL);
            URL objURL = new URL(url);
            URLConnection conn = objURL.openConnection();
            FileWriter fw = new FileWriter(file);
            
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            
            String inputLine;
            while ((inputLine = in.readLine()) != null) 
                fw.write(inputLine);
            
            in.close();
            fw.close();
       
    	return file;
    }
    
    
    private void populateLocalRepository(File file) throws Exception
    {
    	String baseURI = "";
    	String serverUrl = "http://localhost:6655/openrdf-sesame";
		RemoteRepositoryManager manager = new RemoteRepositoryManager(serverUrl);
    	Repository myRepository = manager.getRepository("Homework11");
    	try {
    	   RepositoryConnection con = myRepository.getConnection();
    	   try {
    	      con.add(file, baseURI, RDFFormat.RDFXML);
    	   }
    	   finally {
    	      con.close();
    	   }
    	}
    	catch (OpenRDFException e) {
    	   // handle exception
    	}
    	catch (java.io.IOException e) {
    	   // handle io exception
    	}
    }
    
    public static void main(String[] args) {
        /*verifyArgs(args);*/
        Hw11 httpClientPost = new Hw11();
        File input = null;
        
       try
       {
    	//Fetch html from url and copy to a local file
    	input = readArticle("http://www.dailymail.co.uk/health/article-2854179/Health-notes-New-fluorescent-cancer-tattoos-given-patients-radiotherapy-invisible-daylight.html","E:\\E\\Test\\Input.txt");    
    	httpClientPost.input = input;
    	//Set the output local directory
        httpClientPost.output = new File("E:\\E\\Test\\");
        httpClientPost.client = new HttpClient();
        httpClientPost.client.getParams().setParameter("http.useragent", "Calais Rest Client");
        httpClientPost.run();

        //Read the output xml and load the stuff into the repository
        httpClientPost.populateLocalRepository(httpClientPost.xmlOutput);
        
       
       
       }
       catch(Throwable e)
       {
    	   e.printStackTrace();
       }
       finally
       {
    	   
       }
    }



}
